*filter
# Allow all outgoing, but drop incoming and forwarding packets by default
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Custom chains
:FILTERS - [0:0]
:DOCKER-USER - [0:0]
:DOCKER-FILTERS - [0:0]

##################################################
#                  CLEAR TABLES                  #
##################################################

# Apply this file using `iptables-restore -n /etc/iptables/rules.v4`
# to prevent flushing what we don't setup here

-F INPUT
-F FILTERS
-F DOCKER-USER
-F DOCKER-FILTERS

##################################################
#                  FILTERS RULES                 #
##################################################

# This only matches traffic going to the host (excluding ports bound by docker containers)
# So external host -> port bound to external interface
# And container -> port bound to bridge interface

# UDP traffic rules
-A FILTERS -p udp --dport 1900  -j ACCEPT                                     -m comment --comment "Allow UPnP broadcast"
-A FILTERS -p udp --dport 51820 -j ACCEPT                                     -m comment --comment "Allow Wireguard"

# be explicit with rejection of known traffic so they are documented and don't appear in logs
-A FILTERS -p udp --dport 67    -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Deny DHCP"
-A FILTERS -p udp --dport 137   -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Deny NetBIOS"
-A FILTERS -p udp --dport 138   -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Deny NetBIOS"
-A FILTERS -p udp --dport 139   -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Deny NetBIOS"
-A FILTERS -p udp --dport 9003  -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Could be HEOS? From Marantz"
-A FILTERS -p udp --dport 10001 -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Deny Unifi device discovery broadcast"
-A FILTERS -p udp --dport 10518 -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Unsure what this is?"
-A FILTERS -p udp --dport 17500 -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Deny Dropbox LanSync"
-A FILTERS -p udp --dport 57621 -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Deny Spotify P2P"
-A FILTERS -p udp --dport 65001 -j REJECT --reject-with icmp-port-unreachable -m comment --comment "Could be HDHomeRun? From Shield"

# TCP traffic rules
-A FILTERS -p tcp --dport 22    -j ACCEPT                                     -m comment --comment "Allow SSH"
-A FILTERS -p tcp --dport 80    -j ACCEPT                                     -m comment --comment "Allow HTTP"
-A FILTERS -p tcp --dport 443   -j ACCEPT                                     -m comment --comment "Allow HTTPS"

##################################################
#               DOCKER-FILTERS RULES             #
##################################################

# This only handles external traffic going to containers
# Remember to use `-m conntrack --ctorigdstport 80` to match the original destination port
# As traffic intended for containers goes through DNAT, changing the external port to the container port

-A DOCKER-FILTERS -p udp -m conntrack --ctorigdstport 53 -j ACCEPT -m comment --comment "Allow Pihole"
-A DOCKER-FILTERS -p tcp -m conntrack --ctorigdstport 53 -j ACCEPT -m comment --comment "Allow Pihole"

##################################################
#                   INPUT RULES                  #
##################################################

# Boilerplate acceptance policy
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT

# Drop invalid packets
-A INPUT -m conntrack --ctstate INVALID -j DROP

# Pass traffic to filter chain
## Only allow new connections (established and related should already be handled)
## For TCP, additionally only allow new SYN packets since that is the only valid
## method for establishing a new TCP connection
-A INPUT -p udp -m conntrack --ctstate NEW -j FILTERS
-A INPUT -p tcp --syn -m conntrack --ctstate NEW -j FILTERS
-A INPUT -p icmp -m conntrack --ctstate NEW -j ACCEPT

# Reject anything that's fallen through to this point
## Try to be protocol-specific w/ rejection message
-A INPUT -m limit --limit 5/min --limit-burst 10 -j LOG --log-prefix "[iptables] INPUT:REJECT: "
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -j REJECT --reject-with icmp-proto-unreachable

##################################################
#                DOCKER-USER RULES               #
##################################################

# # Boilerplate acceptance policy
-A DOCKER-USER -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A DOCKER-USER -i lo -j ACCEPT

# # Drop invalid packets
-A DOCKER-USER -m conntrack --ctstate INVALID -j DROP

# Don't handle anything container-to-container, or container-to-outside
-A DOCKER-USER -i docker0 -o docker0 -j RETURN
-A DOCKER-USER -i docker0 ! -o docker0 -j RETURN

# Pass traffic to filter chain
## Only allow new connections (established and related should already be handled)
## For TCP, additionally only allow new SYN packets since that is the only valid
## method for establishing a new TCP connection
-A DOCKER-USER -p udp -m conntrack --ctstate NEW -j DOCKER-FILTERS
-A DOCKER-USER -p tcp --syn -m conntrack --ctstate NEW -j DOCKER-FILTERS
-A DOCKER-USER -p icmp -m conntrack --ctstate NEW -j ACCEPT

# Reject anything that's fallen through to this point
## Try to be protocol-specific w/ rejection message
-A DOCKER-USER -m limit --limit 5/min --limit-burst 10 -j LOG --log-prefix "[iptables] DOCKER-USER:REJECT: "
-A DOCKER-USER -p udp -j REJECT --reject-with icmp-port-unreachable
-A DOCKER-USER -p tcp -j REJECT --reject-with tcp-reset
-A DOCKER-USER -j REJECT --reject-with icmp-proto-unreachable

##################################################
#                       END                      #
##################################################

COMMIT

*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT

*security
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT
