# TODO: migrate to podman once on 24.04

- name: Check pihole_ip is valid
  assert:
    that: pihole_ip + "/32" == pihole_ip | ansible.utils.ipaddr('host') | ansible.utils.ipaddr(macvlan_subnet)
    fail_msg: "pihole_ip is not in a valid range or has the wrong format"
    success_msg: "pihole_ip is valid"
  tags:
    - pihole

- name: Add pihole group
  group:
    name: pihole
    system: true
  become: yes
  tags:
    - pihole

- name: Add pihole user
  user:
    name: pihole
    group: pihole
    createhome: no
    system: true
    shell: /usr/sbin/nologin
    home: /nonexistent
  register: pihole_user
  become: yes
  tags:
    - pihole

- name: Create configuration directory
  when: not (ansible_check_mode and pihole_user.changed)
  file:
    dest: /mnt/services/pihole/etc
    state: directory
    owner: "{{ pihole_user.uid }}"
    group: "{{ pihole_user.group }}"
    mode: "0775"
  become: yes
  tags:
    - pihole

- name: Create configuration directory
  file:
    dest: /mnt/services/pihole/dnsmasq
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: yes
  tags:
    - pihole

- name: Create log directory
  when: not (ansible_check_mode and pihole_user.changed)
  file:
    dest: /var/log/pihole
    state: directory
    owner: "{{ pihole_user.uid }}"
    group: "{{ pihole_user.group }}"
    mode: "0755"
  become: yes
  tags:
    - pihole

- import_role:
    name: systemd_unit
    tasks_from: template
  vars:
    src: pihole.service
    condition: "{{ not (ansible_check_mode and pihole_user.changed) }}"
  tags:
    - pihole

- name: Enable the service
  when: not (ansible_check_mode and (systemd_unit.changed or pihole_user.changed))
  systemd:
    name: pihole
    enabled: yes
    daemon_reload: yes
  become: yes
  tags:
    - pihole

- name: Start the service
  when: not (ansible_check_mode and (systemd_unit.changed or pihole_user.changed))
  systemd:
    name: pihole
    state: started
  register: systemd_started
  become: yes
  tags:
    - pihole

- import_role:
    name: logrotate
    tasks_from: compression
  vars:
    item: /mnt/services/pihole/etc/logrotate
    condition: "{{ not (ansible_check_mode and (systemd_started.changed or systemd_unit.changed or pihole_user.changed)) }}"
  tags:
    - pihole

- name: Set web password
  when: not (ansible_check_mode and (systemd_started.changed or systemd_unit.changed or pihole_user.changed))
  lineinfile:
    path: /mnt/services/pihole/etc/setupVars.conf
    regexp: '^WEBPASSWORD='
    line: WEBPASSWORD={{ pihole_password | hash('sha256') | hash('sha256') }}
    validate: bash -n %s
    backup: true
  register: logrotate_pass
  become: yes
  tags:
    - pihole

- name: Restart the service
  when: not (ansible_check_mode and (systemd_unit.changed or pihole_user.changed)) and ((systemd_unit.changed and not systemd_started.changed) or logrotate_conf.changed or logrotate_pass.changed)
  systemd:
    name: pihole
    state: restarted
  become: yes
  tags:
    - pihole

- set_fact:
    pihole_list_update_cmd: /usr/bin/docker run --rm --volume /mnt/services/pihole/etc:/etc/pihole --entrypoint "/usr/bin/php" --env ADLISTS_URL="{{ pihole_adlists | join(' ')}}" --env WHITELIST_URL="{{ pihole_whitelists | join(' ')}}" jacklul/pihole:latest /usr/local/sbin/pihole-updatelists --no-gravity --no-reload --env
  tags:
    - pihole

- name: Schedule updating lists
  cron:
    name: pihole_list_update
    hour: 0
    minute: 47
    weekday: 7
    job: "/usr/bin/systemd-cat --identifier pihole_list_update {{ pihole_list_update_cmd }}"
    user: root
    cron_file: ansible_pihole_list_update
  become: yes
  tags:
    - pihole

- name: Trigger list update
  command: "{{ pihole_list_update_cmd }}"
  register: pihole_list_update
  changed_when: '["inserted", "enabled", "disabled", "migrated"] | select("in", pihole_list_update.stdout) | length > 0'
  become: yes
  tags:
    - pihole

- name: Trigger gravity update
  when: pihole_list_update.changed
  command: /usr/bin/docker exec pihole pihole -g
  register: pihole_gravity_update
  changed_when: true # unclear how to parse the output
  become: yes
  tags:
    - pihole
