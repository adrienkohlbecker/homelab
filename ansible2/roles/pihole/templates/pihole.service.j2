# pihole.service #######################################################################
[Unit]
Description=pihole
After=docker.service mac0.service {{- zfs_root | ternary(" mnt-services.mount", "") }}
Requires=docker.service mac0.service {{- zfs_root | ternary(" mnt-services.mount", "") }}

StartLimitInterval=300
StartLimitBurst=5

[Service]
Restart=always
TimeoutSec=300
RestartSec=15

ExecStartPre=-/usr/bin/docker kill pihole
ExecStartPre=-/usr/bin/docker rm pihole
ExecStartPre=-/usr/bin/docker pull pihole/pihole
ExecStartPre=/usr/bin/docker create \
    --name pihole \
    --log-driver none \
    --volume /mnt/services/pihole/etc:/etc/pihole \
    --volume /mnt/services/pihole/dnsmasq:/etc/dnsmasq.d \
    --volume /var/log/pihole:/var/log/pihole \
    --env TZ="Europe/Amsterdam" \
    --env VIRTUAL_HOST=pihole.{{ inventory_hostname }}.{{ domain }} \
    --env FTLCONF_LOCAL_IPV4={{ pihole_ip }} \
    --env REV_SERVER=true \
    --env REV_SERVER_TARGET={{ home_subnet | ansible.utils.usable_range | community.general.json_query('usable_ips[1]') }} \
    --env REV_SERVER_CIDR={{ home_subnet }} \
    --env PIHOLE_UID={{ pihole_user.uid }} \
    --env PIHOLE_GID={{ pihole_user.group }} \
    --dns=127.0.0.1 \
    --dns=1.1.1.1 \
    --publish {{ macvlan_subnet | ansible.utils.usable_range | community.general.json_query('usable_ips[0]') }}:53:53/udp \
    --publish {{ macvlan_subnet | ansible.utils.usable_range | community.general.json_query('usable_ips[0]') }}:53:53/tcp \
    --label "traefik.enable=true" \
    --label "traefik.docker.network=bridge" \
    --label "traefik.http.services.pihole.loadbalancer.server.port=80" \
    --label "traefik.http.routers.pihole.rule=Host(`pihole.{{ domain }}`) || Host(`pihole.{{ inventory_hostname }}.{{ domain }}`)" \
    --label "traefik.http.routers.pihole.tls=true" \
    --label "traefik.http.routers.pihole.entrypoints=websecure" \
    pihole/pihole:latest
ExecStartPre=/bin/ip route add {{ pihole_ip }}/32 dev mac0
ExecStart=/usr/bin/docker start --attach pihole
ExecStartPost=/usr/bin/timeout 60 bash -c 'sleep 1; while [ "`/usr/bin/docker inspect -f {{ '{{' }}.State.Health.Status{{ '}}' }} pihole`" != "healthy" ]; do sleep 2; done'
ExecStop=/usr/bin/docker stop pihole
ExecStopPost=/bin/ip route delete {{ pihole_ip }}/32 dev mac0

[Install]
WantedBy=default.target
