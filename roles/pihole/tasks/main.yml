- name: Add test binary
  when: docker_test
  file:
    state: touch
    path: /usr/bin/podman
    mode: '0755'
    access_time: preserve
    modification_time: preserve
  become: true
  tags:
    - pihole
    - _check_stage1
    - _check_stage2

- name: Add pihole group
  group:
    name: pihole
    system: true
  become: true
  tags:
    - pihole
    - _check_stage1
    - _check_stage2

- name: Add pihole user
  user:
    name: pihole
    group: pihole
    createhome: false
    system: true
    shell: /usr/sbin/nologin
    home: /nonexistent
  register: pihole_user
  become: true
  tags:
    - pihole
    - _check_stage1
    - _check_stage2

- name: Create configuration directory
  when: not (ansible_check_mode and pihole_user.changed)
  file:
    dest: /mnt/services/pihole/etc
    state: directory
    owner: "{{ pihole_user.uid }}"
    group: "{{ pihole_user.group }}"
    mode: "0775"
  become: true
  tags:
    - pihole
    - _check_stage2

- name: Create configuration directory
  file:
    dest: /mnt/services/pihole/dnsmasq
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: true
  tags:
    - pihole
    - _check_stage2

- name: Configure dnsmasq
  template:
    src: fahm.conf.j2
    dest: /mnt/services/pihole/dnsmasq/fahm.conf
    owner: root
    group: root
    mode: "0644"
    backup: true
  register: fahm_cfg
  become: true
  tags:
    - pihole
    - _check_stage2

- name: Create log directory
  when: not (ansible_check_mode and pihole_user.changed)
  file:
    dest: /var/log/pihole
    state: directory
    owner: "{{ pihole_user.uid }}"
    group: "{{ pihole_user.group }}"
    mode: "0755"
  become: true
  tags:
    - pihole
    - _check_stage2

- name: Install pihole service
  import_role:
    name: systemd_unit
    tasks_from: template
  vars:
    systemd_unit_src: pihole.service
    systemd_unit_condition: "{{ not (ansible_check_mode and pihole_user.changed) }}"
  tags:
    - pihole
    - _check_stage2

- name: Enable pihole service
  import_role:
    name: systemd_unit
    tasks_from: service
  vars:
    systemd_unit_src: pihole
    systemd_unit_condition: "{{ not (ansible_check_mode and (systemd_unit.changed or pihole_user.changed)) }}"
    systemd_unit_start: "{{ not docker_test }}"
    systemd_unit_restart: false
  tags:
    - pihole

- name: Configure pihole logrotate
  import_role:
    name: logrotate
    tasks_from: compression
  vars:
    logrotate_item: /mnt/services/pihole/etc/logrotate
    logrotate_condition: "{{ not (ansible_check_mode and (systemd_started.changed or systemd_unit.changed or pihole_user.changed)) and not docker_test }}"
  tags:
    - pihole

- name: Set web password
  when: not (ansible_check_mode and (systemd_started.changed or systemd_unit.changed or pihole_user.changed)) and not docker_test
  lineinfile:
    path: /mnt/services/pihole/etc/setupVars.conf
    regexp: ^WEBPASSWORD=
    line: WEBPASSWORD={{ pihole_password | hash('sha256') | hash('sha256') }}
    validate: bash -n %s
    backup: true
  register: pihole_webpassword
  become: true
  tags:
    - pihole

- name: Configure health script
  copy:
    src: pihole_healthcheck.sh
    dest: /usr/local/bin/pihole_healthcheck
    owner: root
    group: root
    mode: "0755"
    backup: true
    validate: bash -n %s
  become: true
  tags:
    - pihole

- name: Restart the service
  when: not (ansible_check_mode and (systemd_unit.changed or pihole_user.changed)) and not docker_test and ((systemd_unit.changed and not systemd_started.changed) or logrotate_conf.changed or pihole_webpassword.changed or fahm_cfg.changed)
  systemd:
    name: pihole
    state: restarted
  throttle: 1
  become: true
  tags:
    - pihole

- name: Compute list update command
  set_fact:
    pihole_list_update_cmd: /usr/bin/podman run --rm --quiet --volume /mnt/services/pihole/etc:/etc/pihole --entrypoint "/usr/bin/php" --env ADLISTS_URL="{{ pihole_adlists | join(' ') }}" --env WHITELIST_URL="{{ pihole_whitelists | join(' ') }}" docker.io/jacklul/pihole:2024.05.0 /usr/local/sbin/pihole-updatelists --no-gravity --no-reload --env
  tags:
    - pihole

- name: Schedule updating lists
  cron:
    name: pihole_list_update
    hour: 0
    minute: 47
    weekday: 7
    job: /usr/local/bin/run_job weekly pihole_list_update {{ pihole_list_update_cmd }}
    user: root
    cron_file: ansible_pihole_list_update
  become: true
  tags:
    - pihole

- name: Monitor list update script
  import_role:
    name: cron
    tasks_from: monitor
  vars:
    cron_entry: pihole_list_update
  tags:
    - pihole

- name: Trigger list update
  when: not docker_test
  command: "{{ pihole_list_update_cmd }}"
  register: pihole_list_update
  changed_when: '["inserted", "enabled", "disabled", "migrated"] | select("in", pihole_list_update.stdout) | length > 0'
  become: true
  tags:
    - pihole

- name: Trigger gravity update
  when: pihole_list_update.changed
  command: /usr/bin/podman exec pihole pihole -g
  register: pihole_gravity_update
  changed_when: true # unclear how to parse the output
  become: true
  tags:
    - pihole

- name: Configure pihole metrics
  import_role:
    name: netdata
    tasks_from: template
  vars:
    netdata_template_src: pihole.conf.j2
    netdata_template_dest: go.d/pihole.conf
    netdata_template_mode: "0600"
  tags:
    - pihole

- name: Configure nginx
  import_role:
    name: nginx
    tasks_from: site
  vars:
    nginx_subdomain: pihole
    nginx_proxy_pass: http://localhost:8943/
  tags:
    - pihole

- name: Ensure keepalived directory exists
  file:
    dest: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop:
    - /etc/keepalived/
    - /etc/keepalived/conf.d/
  become: true
  tags:
    - pihole

- name: Configure keepalived
  template:
    src: keepalived.conf.j2
    dest: /etc/keepalived/conf.d/pihole.conf
    owner: root
    group: root
    mode: "0644"
    backup: true
  register: pihole_keepalived_cfg
  become: true
  tags:
    - pihole

- name: Restart keepalived
  when: (pihole_keepalived_cfg.changed) and not docker_test
  systemd:
    name: keepalived
    state: restarted
  become: true
  tags:
    - pihole
