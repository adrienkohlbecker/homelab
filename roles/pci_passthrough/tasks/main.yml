---

- name: Gather PCI ID of VFIO passthrough devices
  shell: "lspci | grep '{{ item }}' | awk '{ print $1 }' | sed 's/^/0000:/' | tr '\n' ' ' | sed 's/ $//'"
  register: vfio_device_ids_list
  with_items: vfio_device_names
  changed_when: false

- name: Gather vendor:device ids for pci stubs
  shell: "lspci -n | grep \"$(lspci | grep '{{item}}' | awk '{ print $1 }')\" | awk '{ print $3 }'  | tr '\n' ','  | sed 's/,$//'"
  register: pci_stub_device_ids_list
  with_items: pci_stub_device_names
  changed_when: false

- name: Set vfio ids fact
  set_fact: "vfio_device_ids=\"{{ vfio_device_ids_list.results | join(' ', attribute='stdout') }}\""

- name: Set pci stub ids fact
  set_fact: "pci_stub_device_ids=\"{{ pci_stub_device_ids_list.results | join(',', attribute='stdout') }}\""

- name: Blacklist the driver modules
  kernel_blacklist: name={{item}} state=present
  sudo: true
  with_items: driver_modules_blacklist

- name: Install lsgroup binary
  copy: src=lsgroup dest=/usr/bin/lsgroup owner=root group=root mode=0755
  sudo: true

- name: Install iommu_group_for_device binary
  copy: src=iommu_group_for_device dest=/usr/bin/iommu_group_for_device owner=root group=root mode=0755
  sudo: true

- name: Install vfio-bind binary
  copy: src=vfio-bind dest=/usr/bin/vfio-bind owner=root group=root mode=0755
  sudo: true

- name: Install vfio-bind service
  copy: src=vfio-bind.conf dest=/etc/init/vfio-bind.conf owner=root group=root mode=0644
  sudo: true

- name: Install vfio-bind configuration
  template: src=vfio-bind.j2 dest=/etc/vfio-bind.cfg owner=root group=root mode=0644
  sudo: true

- name: Configure GRUB
  lineinfile: "dest=/etc/default/grub regexp='{{ item.regexp }}' line='{{ item.line }}' state=present"
  sudo: true
  with_items: grub_config
  notify: update grub

- name: Check if reboot is required
  stat: path=/var/run/reboot-required
  register: should_reboot

- name: Reboot the system
  command: reboot
  sudo: true
  when: should_reboot.stat.exists == True
  register: rebooting

- name: Wait for ssh to come back up
  local_action: wait_for port=22 delay=20 host=10.0.0.11
  when: rebooting|changed

- name: Define vms
  virt: name={{item}} command=define xml="{{ lookup('file', item+'.xml') }}"
  with_items:
    - Ubuntu_base
    - Tretflix
    - HTPC
    - TimeCapsule

- name: Configure networking
  copy: src=interfaces dest=/etc/network/interfaces owner=root group=root mode=0644
  sudo: true
  notify: Restart networking

- name: Allow forwarding traffic through ufw
  lineinfile: dest=/etc/default/ufw regexp='DEFAULT_FORWARD_POLICY=' state=present line='DEFAULT_FORWARD_POLICY="ACCEPT"'
  sudo: true

# - name: Copy backup script
#   copy: src=libvirt_backup.sh dest=/usr/local/bin/libvirt_backup owner=root group=root mode=0755
#   sudo: true

# - name: Schedule the backup script
#   cron: name="libvirt backup" minute=0 hour=5 job="/usr/local/bin/libvirt_backup" user=root cron_file=ansible_libvirt_backup
#   sudo: true
