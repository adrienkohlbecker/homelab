---

- name: Gather PCI ID of VFIO passthrough devices
  shell: "lspci | grep '{{ item }}' | awk '{ print $1 }' | sed 's/^/0000:/' | tr '\n' ' ' | sed 's/ $//'"
  register: vfio_device_ids_list
  with_items: vfio_device_names
  changed_when: false

- name: Gather vendor:device ids for pci stubs
  shell: "lspci -n | grep \"$(lspci | grep '{{item}}' | awk '{ print $1 }')\" | awk '{ print $3 }'  | tr '\n' ','  | sed 's/,$//'"
  register: pci_stub_device_ids_list
  with_items: pci_stub_device_names
  changed_when: false

- name: Set vfio ids fact
  set_fact: "vfio_device_ids=\"{{ vfio_device_ids_list.results | join(' ', attribute='stdout') }}\""

- name: Set pci stub ids fact
  set_fact: "pci_stub_device_ids=\"{{ pci_stub_device_ids_list.results | join(',', attribute='stdout') }}\""

- name: Blacklist the driver modules
  kernel_blacklist: name={{item}} state=present
  sudo: true
  with_items: driver_modules_blacklist

- name: Install lsgroup binary
  copy: src=lsgroup dest=/usr/bin/lsgroup owner=root group=root mode=0755
  sudo: true

- name: Install iommu_group_for_device binary
  copy: src=iommu_group_for_device dest=/usr/bin/iommu_group_for_device owner=root group=root mode=0755
  sudo: true

- name: Install vfio-bind binary
  copy: src=vfio-bind dest=/usr/bin/vfio-bind owner=root group=root mode=0755
  sudo: true

- name: Install vfio-bind service
  copy: src=vfio-bind.conf dest=/etc/init/vfio-bind.conf owner=root group=root mode=0644
  sudo: true

- name: Install vfio-bind configuration
  template: src=vfio-bind.j2 dest=/etc/vfio-bind.cfg owner=root group=root mode=0644
  sudo: true

- name: Install kernel-package
  apt: pkg=kernel-package state=installed
  sudo: true

- name: Download kernel {{kernel_version}} source
  get_url: url=https://www.kernel.org/pub/linux/kernel/v3.x/linux-{{kernel_version}}.tar.gz dest=/usr/src/linux-{{kernel_version}}.tar.gz
  sudo: true

- name: Check if kernel is extracted
  stat: path=/usr/src/{{ kernel_src_directory }}
  register: should_extract

- name: Create /usr/src/{{ kernel_src_directory }} directory
  file: dest=/usr/src/{{ kernel_src_directory }} state=directory owner=root group=root mode=755
  when: should_extract.stat.exists == False
  sudo: true

- name: Extract the kernel source
  shell: tar -xzf linux-{{kernel_version}}.tar.gz --strip-components=1 --directory /usr/src/{{ kernel_src_directory }} chdir=/usr/src
  when: should_extract.stat.exists == False
  sudo: true

- name: Download Ubuntu patches
  get_url: url={{item}} dest=/usr/src/{{ kernel_src_directory }}
  with_items:
    - 'http://kernel.ubuntu.com/~kernel-ppa/mainline/v{{kernel_version}}-utopic/0001-base-packaging.patch'
    - 'http://kernel.ubuntu.com/~kernel-ppa/mainline/v{{kernel_version}}-utopic/0002-debian-changelog.patch'
    - 'http://kernel.ubuntu.com/~kernel-ppa/mainline/v{{kernel_version}}-utopic/0003-configs-based-on-Ubuntu-3.15.0-6.11.patch'
  when: should_extract.stat.exists == False
  sudo: true

- name: Download GCC microarch patch
  get_url: url=https://raw.githubusercontent.com/graysky2/kernel_gcc_patch/master/outdated_versions/linux-3.15+/gcc-4.2+/enable_additional_cpu_optimizations_for_gcc_kernel_v3.15+.patch dest=/usr/src/{{ kernel_src_directory }}
  sudo: true

- name: Copy ACS override patch
  copy: src=override_for_missing_acs_capabilities.patch dest=/usr/src/{{ kernel_src_directory}}/override_for_missing_acs_capabilities.patch
  sudo: true

- name: Apply patches
  shell: cat {{ item }} | patch -p1 chdir=/usr/src/{{ kernel_src_directory }}
  when: should_extract.stat.exists == False
  with_items:
   - 0001-base-packaging.patch
   - 0002-debian-changelog.patch
   - 0003-configs-based-on-Ubuntu-3.15.0-6.11.patch
   - enable_additional_cpu_optimizations_for_gcc_kernel_v3.15+.patch
   - override_for_missing_acs_capabilities.patch
  sudo: true

- name: Copy the configuration of 3.15.2 packaged for utopic as base
  copy: src=config-3.15.2-031502-generic dest=/usr/src/{{ kernel_src_directory }}/.config
  when: should_extract.stat.exists == False
  sudo: true

- name: Update configuration with new kernel
  shell: yes '' | make oldconfig chdir=/usr/src/{{ kernel_src_directory }}
  when: should_extract.stat.exists == False
  sudo: true

- name: Customize configuration
  lineinfile: 'dest=/usr/src/{{ kernel_src_directory }}/.config regexp="^(?:# )?{{ item.regexp }}(=| is not set)" line="{{ item.line }}" state=present'
  register: kernel_config_customization
  with_items: kernel_config
  sudo: true

- name: Update configuration with new values
  shell: yes '' | make oldconfig chdir=/usr/src/{{ kernel_src_directory }}
  when: kernel_config_customization|changed
  sudo: true

- name: Check if kernel is compiled
  stat: path=/usr/src/{{ kernel_image_deb }}
  register: should_compile

- name: Compile the kernel
  shell: make-kpkg --initrd --append-to-version=-{{ kernel_append_to_version }} kernel-image kernel-headers chdir=/usr/src/{{ kernel_src_directory }}
  when: kernel_config_customization|changed or should_compile.stat.exists == False
  sudo: true

- name: Install the kernel
  apt: deb=/usr/src/{{ kernel_image_deb }}
  sudo: true

- name: Install the headers
  apt: deb=/usr/src/{{ kernel_headers_deb }}
  sudo: true

- name: Symlink the kernel
  file: src=/usr/src/{{ kernel_src_directory }} dest=/usr/src/linux state=link
  sudo: true

- name: Configure GRUB
  lineinfile: "dest=/etc/default/grub regexp='{{ item.regexp }}' line='{{ item.line }}' state=present"
  sudo: true
  with_items: grub_config
  notify: update grub

- name: Check if reboot is required
  stat: path=/var/run/reboot-required
  register: should_reboot

- name: Reboot the system
  command: reboot
  sudo: true
  when: should_reboot.stat.exists == True
  register: rebooting

- name: Wait for ssh to come back up
  local_action: wait_for port=22 delay=20 host=10.0.0.11
  when: rebooting|changed

- name: Install custom qemu wrapper for HTPC binary
  copy: src=qemu-system-x86_64.x-vga dest=/usr/bin/qemu-system-x86_64.x-vga owner=root group=root mode=0755
  sudo: true

- name: Define vms
  virt: name={{item}} command=define xml="{{ lookup('file', item+'.xml') }}"
  with_items:
    - Ubuntu_base
    - Tretflix
    - HTPC

- name: Disable apparmor for HTPC (custom binary)
  shell: aa-complain /etc/apparmor.d/libvirt/libvirt-dda812ca-3de2-adac-a6c3-0914760ca54a
  sudo: true
  changed_when: False

- name: Configure networking
  copy: src=interfaces dest=/etc/network/interfaces owner=root group=root mode=0644
  sudo: true
  notify: Restart networking

- name: Allow forwarding traffic through ufw
  lineinfile: dest=/etc/default/ufw regexp='DEFAULT_FORWARD_POLICY=' state=present line='DEFAULT_FORWARD_POLICY="ACCEPT"'
  sudo: true
