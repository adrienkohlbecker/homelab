- name: Install jq
  apt:
    pkg:
      - jq
    cache_valid_time: 3600
  become: true
  tags:
    - act_runner
    - _check_stage1
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Add act_runner group
  group:
    name: act_runner
    system: true
  become: true
  tags:
    - act_runner
    - _check_stage1
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Add act_runner user
  user:
    name: act_runner
    group: act_runner
    createhome: false
    system: true
    shell: /bin/bash
    home: /mnt/scratch/act_runner
  become: true
  register: act_runner_user
  tags:
    - act_runner
    - _check_stage1
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Create configuration directory
  when: not (ansible_check_mode and act_runner_user.changed)
  file:
    dest: "{{ item }}"
    state: directory
    owner: act_runner
    group: act_runner
    mode: "0755"
  become: true
  loop:
    - /mnt/services/act_runner
    - /mnt/scratch/act_runner
    - /mnt/scratch/act_runner/cache
    - /mnt/scratch/act_runner/workdir
  tags:
    - act_runner
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Configure act_runner
  when: not (ansible_check_mode and act_runner_user.changed)
  template:
    src: config.yml.j2
    dest: /mnt/services/act_runner/config.yml
    owner: act_runner
    group: act_runner
    mode: "0644"
    backup: true
  register: act_runner_conf
  become: true
  tags:
    - act_runner
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Check if act_runner is installed
  command: act_runner --version
  register: act_runner_check
  failed_when: false
  changed_when: false
  check_mode: false
  become: true
  tags:
    - act_runner
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Install act_runner if needed
  when: '"v0.2.10" not in act_runner_check.stderr'
  get_url:
    url: https://gitea.com/gitea/act_runner/releases/download/v0.2.10/act_runner-0.2.10-linux-{{ (ansible_architecture == "aarch64") | ternary('arm64', 'amd64') }}
    checksum: sha256:{{ (ansible_architecture == "aarch64") | ternary('1d727f9190ce559689db9d716d548f01c0cde1c034c9c4d570f7992857251be8', 'b11753c8fe0143dfbaa392ffc5cc035db551fd7254c145dce512aebc8947542a') }}
    dest: /usr/local/bin/act_runner
    mode: "0755"
    owner: root
    group: root
  become: true
  tags:
    - act_runner
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Get registration token (test)
  when: docker_test
  command: /gitea actions generate-runner-token
  changed_when: true
  register: _test_runner_token
  become: true
  tags:
    - act_runner
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Register runner
  when: not (ansible_check_mode and act_runner_user.changed)
  command: act_runner register -c /mnt/services/act_runner/config.yml --no-interactive --instance {{ docker_test | ternary('http://localhost:3000', 'https://gitea.' + inventory_hostname + '.' + domain) }} --token {{ docker_test | ternary((ansible_check_mode | ternary("TOKEN", _test_runner_token.stdout_lines[1])), gitea_runner_registration_token) }}
  args:
    creates: /mnt/services/act_runner/.runner
  timeout: 5
  become: true
  become_user: act_runner
  register: act_runner_registration
  tags:
    - act_runner
    - _check_stage2
    - _check_stage3
    - _check_stage4

- name: Load JSON file
  when: not (ansible_check_mode and (act_runner_user.changed or act_runner_registration.changed))
  slurp:
    src: /mnt/services/act_runner/.runner
  register: act_runner_settings_b64
  become: true
  tags:
    - act_runner
    - _check_stage3
    - _check_stage4

- name: Configure act_runner
  when: not (ansible_check_mode and (act_runner_user.changed or act_runner_registration.changed))
  template:
    src: runner.json.j2
    dest: /mnt/services/act_runner/.runner
    owner: act_runner
    group: act_runner
    mode: "0600"
    backup: true
    validate: jq . %s
  vars:
    act_runner_settings_json: "{{ act_runner_settings_b64['content'] | default('e30=') | b64decode | from_json }}"
  register: act_runner_json_conf
  become: true
  tags:
    - act_runner
    - _check_stage3
    - _check_stage4

- name: Install act_runner service
  import_role:
    name: systemd_unit
    tasks_from: template
  vars:
    systemd_unit_src: act_runner.service
    systemd_unit_condition: "{{ not (ansible_check_mode and act_runner_user.changed) }}"
  tags:
    - act_runner
    - _check_stage3
    - _check_stage4

- name: Enable act_runner service
  import_role:
    name: systemd_unit
    tasks_from: service
  vars:
    systemd_unit_src: act_runner
    systemd_unit_condition: "{{ not (ansible_check_mode and (systemd_unit.changed or act_runner_user.changed)) }}"
    systemd_unit_restart: "{{ systemd_unit.changed or act_runner_conf.changed or act_runner_registration.changed or act_runner_json_conf.changed }}"
  tags:
    - act_runner
    - _check_stage4

- name: Turn on linger
  command: loginctl enable-linger act_runner
  args:
    creates: /var/lib/systemd/linger/act_runner
  become: true
  register: act_runner_linger
  tags:
    - act_runner
    - _check_stage4

- name: Enable rootless podman socket
  when: not (ansible_check_mode and (act_runner_user.changed or act_runner_linger.changed))
  systemd:
    name: podman.socket
    enabled: true
    scope: user
  become: true
  become_user: act_runner
  tags:
    - act_runner

- name: Start rootless podman socket
  when: not (ansible_check_mode and (act_runner_user.changed or act_runner_linger.changed))
  systemd:
    name: podman.socket
    state: started
    scope: user
  become: true
  become_user: act_runner
  tags:
    - act_runner
