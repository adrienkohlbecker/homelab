- name: Install Go
  apt:
    pkg:
      - golang
    cache_valid_time: 3600
  become: true
  tags:
    - custom_exporter

- name: Create source directory
  file:
    dest: /opt/custom_exporter
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: true
  register: custom_exporter_dir
  tags:
    - custom_exporter

- name: Copy files
  copy:
    src: "{{ item }}"
    dest: /opt/custom_exporter/{{ item }}
    owner: root
    group: root
    mode: "0644"
    backup: true
  loop:
    - go.mod
    - go.sum
    - main.go
  register: custom_exporter_files
  become: true
  tags:
    - custom_exporter

- name: Compile source
  command: go build main.go
  args:
    chdir: /opt/custom_exporter
  changed_when: true
  when: not (ansible_check_mode and custom_exporter_dir.changed) and custom_exporter_files.changed
  become: true
  tags:
    - custom_exporter

- name: Configure custom_exporter
  template:
    src: env.j2
    dest: /etc/default/custom_exporter
    owner: root
    group: root
    mode: "0644"
    backup: true
  register: custom_exporter_cfg
  become: true
  tags:
    - custom_exporter

- name: Install custom_exporter service
  import_role:
    name: systemd_unit
  vars:
    systemd_unit_src: custom_exporter.service
  tags:
    - custom_exporter

- name: Enable the service
  when: not (ansible_check_mode and systemd_unit.changed)
  systemd:
    name: custom_exporter
    enabled: true
  become: true
  tags:
    - custom_exporter

- name: Start the service
  when: not (ansible_check_mode and systemd_unit.changed)
  systemd:
    name: custom_exporter
    state: started
  register: systemd_started
  become: true
  tags:
    - custom_exporter

- name: Restart the service
  when: not (ansible_check_mode and systemd_unit.changed) and (systemd_unit.changed or custom_exporter_files.changed or custom_exporter_cfg.changed) and not systemd_started.changed
  systemd:
    name: custom_exporter
    state: restarted
  become: true
  tags:
    - custom_exporter

- name: Copy the alerting config
  copy:
    src: alerts.conf
    dest: /etc/netdata/health.d/alerts.conf
    owner: netdata
    group: netdata
    mode: "0600"
    backup: true
  register: alerts_conf
  become: true
  tags:
    - custom_exporter

- name: Reload health configuration
  when: alerts_conf.changed
  command: netdatacli reload-health
  changed_when: true
  become: true
  tags:
    - custom_exporter
