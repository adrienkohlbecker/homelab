#!/usr/bin/env python
from optparse import OptionParser

usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser(usage=usage)
parser.add_option("-t", "--title", action="store", dest="title")
parser.add_option("--text", action="store", dest="text")
parser.add_option("-f", "--file", action="store", dest="file")
parser.add_option("-p", "--priority", action="store", dest="priority", default="normal", choices=["normal", "low"])
parser.add_option("--tag", action="append", dest="tags")
parser.add_option("--host", action="store", dest="host")
parser.add_option("--alert_type", action="store", dest="alert_type", default="info", choices=["error", "warning", "info", "success"])
parser.add_option("-a", "--aggregation_key", action="store", dest="aggregation_key", default=None)

(options, args) = parser.parse_args()

assert options.title != None, "Title is required"
assert (options.file != None or options.text != None), "Text or file is required"

if options.text == None:
  options.text = open(options.file, 'r').read()

lines = options.text.split("\n")
if len(lines) > 15:
  options.text = "[...]\n" + "\n".join(lines[len(lines)-15:len(lines)])

if options.alert_type in ["error", "warning"]:
  options.text = "Cc: @all\n" + options.text

from dogapi import dog_http_api as api

api.api_key = '{{ datadog_api_key }}'
api.application_key = '{{ datadog_application_key }}'

api.event_with_response(options.title, options.text, priority=options.priority, tags=options.tags, host=options.host, alert_type=options.alert_type, aggregation_key=options.aggregation_key)
